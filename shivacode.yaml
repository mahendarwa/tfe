import snowflake.connector as sfc
import os
import yaml

def get_conf_val(config_file, config_nm):
    """
    Retrieves the requested value from the configuration file.
    """
    try:
        config_path = f'./config/{config_file}.yml'
        with open(config_path, "r") as stream:
            config = yaml.safe_load(stream)
        return config.get(config_nm, None)
    except Exception as e:
        print(f"Error retrieving configuration: {str(e)}")
        return None

def set_proxies():
    """Set HTTPS proxy if needed."""
    try:
        os.environ["HTTPS_PROXY"] = "http://proxy.us-east-1.app.dtcc.org:8080"
        os.environ["NO_PROXY"] = "privatelink.snowflakecomputing.com"
    except Exception as e:
        print(f"Error setting proxies: {str(e)}")

def sf_create_ctx():
    """
    Creates a Snowflake connector based on the configuration values.
    """
    try:
        set_proxies()
        warehouse = get_conf_val("sf_config", "SF_WAREHOUSE")
        database = get_conf_val("sf_config", "SF_DATABASE")
        schema = get_conf_val("sf_config", "SF_SCHEMA")
        user = get_conf_val("sf_config", "SF_USER")
        account = get_conf_val("sf_config", "SF_ACCOUNT_ID")
        host = get_conf_val("sf_config", "SF_URL")

        print(f"Configured Warehouse: {warehouse}")
        print(f"Configured Database: {database}")
        print(f"Configured Schema: {schema}")

        conn = sfc.connect(
            user=user,
            account=account,
            host=host,
            warehouse=warehouse,
            database=database,
            schema=schema,
            authenticator="oauth",
            token=get_conf_val("sf_config", "SF_OAUTH_TOKEN")
        )

        print("Successfully connected to Snowflake!")
        return conn

    except Exception as e:
        print(f"Failed to connect to Snowflake: {str(e)}")
        return None

def check_snowflake_connection():
    """
    Checks whether Snowflake authentication is successful.
    """
    conn = sf_create_ctx()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute("SELECT CURRENT_USER(), CURRENT_TIMESTAMP();")
            result = cur.fetchall()
            print("User and Timestamp:", result)
            cur.close()
        except Exception as e:
            print(f"Error executing test query: {str(e)}")
        finally:
            conn.close()
    else:
        print("Connection to Snowflake failed!")

# Run the connection check
check_snowflake_connection()
