package wiz

default result = "pass"

# List of system namespaces where we don't want to enforce this rule
system_namespaces = {"istio-system"}

result = "skip" {
    system_namespaces[input.metadata.namespace]
} else = "skip" {
    not contains(input.object.apiVersion, "istio.io")
} else = "fail" {
    lower(input.metadata.annotations["sidecar.istio.io/inject"]) == "false"
}

currentConfiguration := sprintf("'sidecar.istio.io/inject' annotation: '%v'", [input.metadata.annotations["sidecar.istio.io/inject"]])
expectedConfiguration := "'sidecar.istio.io/inject' annotation should not be set to 'false'"
======================================
CSM-04
# TDSTIG-GCPPLAT-CSM-04-WIZ-CCR-AKS-001
package wiz

default result = "pass"

result = "fail" {
    input.kind.kind == "ConfigMap"
    input.namespace == "istio-system"
    startswith(input.name, "istio-asm")
    mesh_config := yaml.unmarshal(input.object.data.mesh)
    mesh_config.defaultConfig.proxyMetadata.CA_PROVIDER != "Citadel"
}

currentConfiguration := sprintf("Current CA_PROVIDER: %s", 
    [yaml.unmarshal(input.object.data.mesh).defaultConfig.proxyMetadata.CA_PROVIDER])

expectedConfiguration := "CA_PROVIDER should be set to 'Citadel'"

# select the relevant configmap
is_relevant_configmap {
    input.kind.kind == "ConfigMap"
    input.namespace == "istio-system"
    startswith(input.name, "istio-asm")
}

result = "skip" {
    not is_relevant_configmap
} else = "skip" {
    not contains(input.object.apiVersion, "istio.io")
}

=================================
CSM-01

package wiz

default result = "pass"

result = "skip" {
    not input.object.kind == "PeerAuthentication"
} else = "skip" {
    not contains(input.object.apiVersion, "istio.io")
} else = "fail" {
    not mtls_configured
}

expectedConfiguration := "PeerAuthentication must be in STRICT mode"

currentConfiguration := sprintf(
    "Your PeerAuthentication %v/%v does not have mtls set to STRICT",
    [input.namespace, input.name]
)

mtls_configured := true {
    input.object.spec.mtls
    input.object.spec.mtls.mode == "STRICT"
}

===================================================
CSM-02

package wiz

default result = "pass"

# Skip if not a Gateway or if the apiVersion does not contain "istio.io"
result = "skip" {
    upper(input.object.kind) != "GATEWAY"
} else = "skip" {
    not contains(input.object.apiVersion, "istio.io")
}

# Check for non-compliant HTTP/HTTP2 servers without HTTPS redirect
non_compliant_http {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "HTTP"
    not server.tls.httpsRedirect == true
}

non_compliant_http {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "HTTP2"
    not server.tls.httpsRedirect == true
}

# Check for non-compliant HTTPS/TLS servers without SIMPLE tls mode
non_compliant_https {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "HTTPS"
    not server.tls.mode == "SIMPLE"
}

non_compliant_https {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "TLS"
    not server.tls.mode == "SIMPLE"
}

# Check for non-compliant TCP, GRPC, GRPC-WEB servers
non_compliant_other {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "TCP"
}

non_compliant_other {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "GRPC"
}

non_compliant_other {
    some i
    server := input.object.spec.servers[i]
    server.port.protocol == "GRPC-WEB"
}

# Set result to "fail" if any non-compliant condition is met
result = "fail" {


========================================
CSM-10
package wiz

default result = "skip"

result = "skip" {
    input.object.kind != "Gateway"
} else = "skip" {
    not contains(input.object.apiVersion, "istio.io")
} else = "pass" {
    count(invalid_hosts) == 0
} else = "fail"

invalid_hosts[host] {
    some i
    host := input.object.spec.servers[i].hosts[_]
    not startswith(host, concat("/", [input.namespace, ""]))
    not startswith(host, "./")
}

invalid_hosts[host] {
    some i
    server := input.object.spec.servers[i]
    some j
    host := server.hosts[j]
    parts := split(host, "/")
    count(parts) > 1
    startswith(parts[1], "*")
}

startswith(str, prefix) {
    substring(str, 0, cou
==========================================
CSM-27
package wiz

default result = "pass"

# Skip if apiVersion does not contain "istio.io"
result = "skip" {
    not contains(input.object.apiVersion, "istio.io")
}

# Check if the TLS mode is not in the allowed list
invalid_tls_mode {
    tls_mode := input.object.spec.trafficPolicy.tls.mode
    not tls_mode == "ISTIO_MUTUAL"
    not tls_mode == "SIMPLE"
    not tls_mode == "MUTUAL"
}

# Fail if TLS mode exists and is not in the allowed list
result = "fail" {
    input.object.spec.trafficPolicy.tls.mode
    invalid_tls_mode
}

# Set current configuration
currentConfiguration := sprintf("TLS mode is set to '%v'", [input.object.spec.trafficPolicy.tls.mode]) {
    input.object.spec.trafficPolicy.tls.mode
} else := "TLS mode is not set"

# Set expected configuration
expectedConfiguration := "TLS mode should be one of 'ISTIO_MUTUAL', 'SIMPLE', 'MUTUAL', or not set"
